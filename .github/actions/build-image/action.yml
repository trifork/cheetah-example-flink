name: "Build and push image to ghcr.io"
description: "Build and push image to ghcr.io"
# todo: clean this
inputs:
  src:
    description: ""
    required: false
    default: "src"
  project_path:
    description: "Path to project file"
    required: false
  assembly_name:
    description: "Used in build-args"
    required: false
  image_tag:
    description: "if set, will be used as tag instead of the default autogenerated tags"
    required: false
    default: ""
  image_name:
    description: "Name of the image to build"
    required: true
  context:
    description: "Path to context"
    required: true
  base_image:
    description: ""
    default: dockerfiles/Dockerfile.generic
  github_token:
    description: "Token for pushing to ghcr.io"
    required: true
  gitlab_token:
    description: ""
    required: false
    default: ""
  github_actor:
    description: ""
    required: true
  github_run_id:
    description: ""
    required: false
    default: latest
  push_image:
    description: Should we push the image
    required: false
    default: "true"
  upload_image:
    description: Should we upload the image as an artifact
    required: false
    default: "false"
  github_shared:
    description: ""
    required: true
    default: "https://nuget.pkg.github.com/trifork/index.json"
  settings-path:
    description: "..."
    default: "./"
    required: true
  read_package_pat:
    description: "PAT for reading packages"
    required: true
  environment:
    required: false
    description: "Which environment to build for"
    default: Production
  architecture:
    required: false
    description: "Which architectures to build for"
    default: "linux/amd64,linux/arm64"
  jar_name_pattern:
    description: ""
    required: true
  flink_image_version:
    description: ""
    required: true

runs:
  using: composite
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3

    - name: Log in to the Container registry
      uses: docker/login-action@b4bedf8053341df3b5a9f9e0f2cf4e79e27360c6
      with:
        registry: ghcr.io
        username: ${{ inputs.github_actor }}
        password: ${{ inputs.github_token }}

    - name: Replace trifork in image_name
      id: replaced
      uses: frabert/replace-string-action@v2
      with:
        pattern: "trifork/(.*)"
        string: ${{ inputs.image_name }}
        replace-with: "$1"

    - name: Log in to the Kamstrup Container registry
      if: inputs.gitlab_token != ''
      uses: docker/login-action@b4bedf8053341df3b5a9f9e0f2cf4e79e27360c6
      with:
        registry: registry.gitlab.com/kamstrup/dataplatform/external-dependencies
        username: trifork
        password: ${{ inputs.gitlab_token }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@879dcbb708d40f8b8679d4f7941b938a086e23a7
      with:
        images: ghcr.io/${{ inputs.image_name }}
        labels: |
          org.opencontainers.image.vendor=Trifork
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        tags: |
          type=ref,event=branch,suffix=-${{inputs.github_run_id}}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Extract metadata (tags, labels) for Docker
      id: meta-kamstrup
      uses: docker/metadata-action@879dcbb708d40f8b8679d4f7941b938a086e23a7
      with:
        images: registry.gitlab.com/kamstrup/dataplatform/external-dependencies/${{ steps.replaced.outputs.replaced }}
        labels: |
          org.opencontainers.image.vendor=Trifork
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
        tags: |
          type=ref,event=branch,suffix=-${{inputs.github_run_id}}
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Get app version
      shell: bash
      id: vars
      run: echo ::set-output name=app_version::${GITHUB_REF#refs/*/v}

    - name: Determine output type
      shell: bash
      id: determine-output
      run: |
        if [[ "${{ inputs.push_image }}" == "true" ]]; then
          echo "::set-output name=value::type=registry"
        elif [[ "${{ inputs.upload_image }}" == "true" ]]; then
          echo "::set-output name=value::type=docker,dest=/tmp/image.tar"
        else
          echo "::set-output name=value::type=docker"
        fi

    - name: Determine tags
      shell: bash
      id: determine-tags
      run: |
        if [[ "${{ inputs.image_tag }}" == "" ]]; then
          echo "::set-output name=value::${{ steps.meta.outputs.tags }}"
        else
          echo "::set-output name=value::${{ inputs.image_tag }}"
        fi

    - name: Check if pom.xml exists
      shell: bash
      id: pomfile
      run: |
        if [[ -f "pom.xml" ]]; then
          echo "::set-output name=exists::true"
        else
          echo "::set-output name=exists::false"
        fi

    - uses: trifork/cheetah-platform-examples/.github/actions/maven-restore@main
      if: steps.pomfile.outputs.exists == 'true'
      with:
        settings-path: ${{ inputs.settings-path }} # location for the settings.xml file
        github_actor: ${{ inputs.github_actor }}
        read_package_pat: ${{ inputs.read_package_pat }}

    - name: Build and push Docker image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.architecture }}
        file: ${{ inputs.base_image }}
        #push: ${{ inputs.push_image == 'true' }}
        outputs: ${{ steps.determine-output.outputs.value }}
        tags: ${{ steps.determine-tags.outputs.value }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          projectFile=${{ inputs.project_path }}
          assemblyName=${{ inputs.assembly_name }}
          src=${{ inputs.src }}
          jarNamePattern=${{ inputs.jar_name_pattern }}
          flinkImageVersion=${{ inputs.flink_image_version }}
          ENVIRONMENT=${{ inputs.environment }}
          APP_VERSION=${{ steps.vars.outputs.app_version }}
        secrets: |
          GITHUB_TOKEN=${{ inputs.read_package_pat }}
          GITHUB_ACTOR=${{ inputs.github_actor }}

    - name: Build and push Docker image to Kamstrup
      if: inputs.push_image == 'true' && inputs.gitlab_token != ''
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.architecture }}
        file: ${{ inputs.base_image }}
        push: ${{ inputs.push_image == 'true' }}
        tags: ${{ steps.meta-kamstrup.outputs.tags }}
        labels: ${{ steps.meta-kamstrup.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
        build-args: |
          projectFile=${{ inputs.project_path }}
          assemblyName=${{ inputs.assembly_name }}
          src=${{ inputs.src }}
          jarNamePattern=${{ inputs.jar_name_pattern }}
          flinkImageVersion=${{ inputs.flink_image_version }}
          ENVIRONMENT=${{ inputs.environment }}
          APP_VERSION=${{ steps.vars.outputs.app_version }}
        secrets: |
          GITLAB_TOKEN=${{ inputs.gitlab_token }}

    - name: Upload artifact
      if: inputs.push_image != 'true' && inputs.upload_image == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: dockerimage
        path: /tmp/image.tar
